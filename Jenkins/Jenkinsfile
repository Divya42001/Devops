// Jenkins installed and configured.
// Amazon EKS cluster created and configured.
// Docker installed on Jenkins server.
// Necessary plugins installed in Jenkins:
// Pipeline
// Amazon ECR plugin
// Kubernetes Continuous Deploy plugin
// Docker Pipeline plugin

pipeline {
    agent any
    
    parameters {
        choice(name: 'NAMESPACE', choices: ['namespace1', 'namespace2'], description: 'Select the namespace for deployment')
        choice(name: 'ENVIRONMENT', choices: ['staging', 'dev', 'prod'], description: 'Select the environment for deployment')
    }
    
    environment {
        DOCKER_REGISTRY = '123456789012.dkr.ecr.us-east-1.amazonaws.com' // Replace with your ECR registry
        EKS_CLUSTER_NAME = 'your-eks-cluster-name'
    }
    
    stages {
        stage('Checkout Application Code') {
            steps {
                git branch: 'main', credentialsId: 'your-git-credentials', url: 'https://bitbucket.org/your-organization/your-application-repo.git'
            }
        }
        
        stage('Checkout Manifests') {
            steps {
                git branch: 'main', credentialsId: 'your-git-credentials', url: 'https://bitbucket.org/your-organization/your-manifests-repo.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build('your-image-name:latest')
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    docker.withRegistry('https://'+env.DOCKER_REGISTRY, 'ecr:us-east-1:aws-credentials') {
                        docker.image('your-image-name:latest').push('latest')
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    def manifestPath = "path/to/your/manifests/your-manifest-file.yaml"
                    def kubeconfigPath = "/path/to/your/kubeconfig"
                    sh "kubectl apply -f ${manifestPath} --kubeconfig ${kubeconfigPath} --namespace=${params.NAMESPACE} --env=${params.ENVIRONMENT}"
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
